// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/tcvem/backend/pkg/pb/certificate.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import atlas_rpc "github.com/infobloxopen/atlas-app-toolkit/rpc/resource"
import _ "github.com/infobloxopen/protoc-gen-gorm/options"
import infoblox_api "github.com/infobloxopen/atlas-app-toolkit/query"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Certficate struct {
	Id    *atlas_rpc.Identifier `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name  string                `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Host  string                `protobuf:"bytes,3,opt,name=host" json:"host,omitempty"`
	Port  string                `protobuf:"bytes,4,opt,name=port" json:"port,omitempty"`
	Notes string                `protobuf:"bytes,5,opt,name=notes" json:"notes,omitempty"`
}

func (m *Certficate) Reset()                    { *m = Certficate{} }
func (m *Certficate) String() string            { return proto.CompactTextString(m) }
func (*Certficate) ProtoMessage()               {}
func (*Certficate) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Certficate) GetId() *atlas_rpc.Identifier {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Certficate) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Certficate) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *Certficate) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

func (m *Certficate) GetNotes() string {
	if m != nil {
		return m.Notes
	}
	return ""
}

type CreateCertficateRequest struct {
	Payload *Certficate `protobuf:"bytes,1,opt,name=payload" json:"payload,omitempty"`
}

func (m *CreateCertficateRequest) Reset()                    { *m = CreateCertficateRequest{} }
func (m *CreateCertficateRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateCertficateRequest) ProtoMessage()               {}
func (*CreateCertficateRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *CreateCertficateRequest) GetPayload() *Certficate {
	if m != nil {
		return m.Payload
	}
	return nil
}

type CreateCertficateResponse struct {
	Result *Certficate `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *CreateCertficateResponse) Reset()                    { *m = CreateCertficateResponse{} }
func (m *CreateCertficateResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateCertficateResponse) ProtoMessage()               {}
func (*CreateCertficateResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *CreateCertficateResponse) GetResult() *Certficate {
	if m != nil {
		return m.Result
	}
	return nil
}

type ReadCertficateRequest struct {
	Id *atlas_rpc.Identifier `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *ReadCertficateRequest) Reset()                    { *m = ReadCertficateRequest{} }
func (m *ReadCertficateRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadCertficateRequest) ProtoMessage()               {}
func (*ReadCertficateRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *ReadCertficateRequest) GetId() *atlas_rpc.Identifier {
	if m != nil {
		return m.Id
	}
	return nil
}

type ReadCertficateResponse struct {
	Result *Certficate `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *ReadCertficateResponse) Reset()                    { *m = ReadCertficateResponse{} }
func (m *ReadCertficateResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadCertficateResponse) ProtoMessage()               {}
func (*ReadCertficateResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *ReadCertficateResponse) GetResult() *Certficate {
	if m != nil {
		return m.Result
	}
	return nil
}

type UpdateCertficateRequest struct {
	Payload *Certficate `protobuf:"bytes,1,opt,name=payload" json:"payload,omitempty"`
}

func (m *UpdateCertficateRequest) Reset()                    { *m = UpdateCertficateRequest{} }
func (m *UpdateCertficateRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateCertficateRequest) ProtoMessage()               {}
func (*UpdateCertficateRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *UpdateCertficateRequest) GetPayload() *Certficate {
	if m != nil {
		return m.Payload
	}
	return nil
}

type UpdateCertficateResponse struct {
	Result *Certficate `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *UpdateCertficateResponse) Reset()                    { *m = UpdateCertficateResponse{} }
func (m *UpdateCertficateResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateCertficateResponse) ProtoMessage()               {}
func (*UpdateCertficateResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *UpdateCertficateResponse) GetResult() *Certficate {
	if m != nil {
		return m.Result
	}
	return nil
}

type DeleteCertficateRequest struct {
	Id *atlas_rpc.Identifier `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteCertficateRequest) Reset()                    { *m = DeleteCertficateRequest{} }
func (m *DeleteCertficateRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteCertficateRequest) ProtoMessage()               {}
func (*DeleteCertficateRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *DeleteCertficateRequest) GetId() *atlas_rpc.Identifier {
	if m != nil {
		return m.Id
	}
	return nil
}

type DeleteCertficateResponse struct {
}

func (m *DeleteCertficateResponse) Reset()                    { *m = DeleteCertficateResponse{} }
func (m *DeleteCertficateResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteCertficateResponse) ProtoMessage()               {}
func (*DeleteCertficateResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

type ListCertficateRequest struct {
	Filter  *infoblox_api.Filtering      `protobuf:"bytes,1,opt,name=filter" json:"filter,omitempty"`
	OrderBy *infoblox_api.Sorting        `protobuf:"bytes,2,opt,name=order_by,json=orderBy" json:"order_by,omitempty"`
	Fields  *infoblox_api.FieldSelection `protobuf:"bytes,3,opt,name=fields" json:"fields,omitempty"`
	Paging  *infoblox_api.Pagination     `protobuf:"bytes,4,opt,name=paging" json:"paging,omitempty"`
}

func (m *ListCertficateRequest) Reset()                    { *m = ListCertficateRequest{} }
func (m *ListCertficateRequest) String() string            { return proto.CompactTextString(m) }
func (*ListCertficateRequest) ProtoMessage()               {}
func (*ListCertficateRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

func (m *ListCertficateRequest) GetFilter() *infoblox_api.Filtering {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *ListCertficateRequest) GetOrderBy() *infoblox_api.Sorting {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *ListCertficateRequest) GetFields() *infoblox_api.FieldSelection {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *ListCertficateRequest) GetPaging() *infoblox_api.Pagination {
	if m != nil {
		return m.Paging
	}
	return nil
}

type ListCertficateResponse struct {
	Results []*Certficate `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
}

func (m *ListCertficateResponse) Reset()                    { *m = ListCertficateResponse{} }
func (m *ListCertficateResponse) String() string            { return proto.CompactTextString(m) }
func (*ListCertficateResponse) ProtoMessage()               {}
func (*ListCertficateResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{10} }

func (m *ListCertficateResponse) GetResults() []*Certficate {
	if m != nil {
		return m.Results
	}
	return nil
}

func init() {
	proto.RegisterType((*Certficate)(nil), "certificate.Certficate")
	proto.RegisterType((*CreateCertficateRequest)(nil), "certificate.CreateCertficateRequest")
	proto.RegisterType((*CreateCertficateResponse)(nil), "certificate.CreateCertficateResponse")
	proto.RegisterType((*ReadCertficateRequest)(nil), "certificate.ReadCertficateRequest")
	proto.RegisterType((*ReadCertficateResponse)(nil), "certificate.ReadCertficateResponse")
	proto.RegisterType((*UpdateCertficateRequest)(nil), "certificate.UpdateCertficateRequest")
	proto.RegisterType((*UpdateCertficateResponse)(nil), "certificate.UpdateCertficateResponse")
	proto.RegisterType((*DeleteCertficateRequest)(nil), "certificate.DeleteCertficateRequest")
	proto.RegisterType((*DeleteCertficateResponse)(nil), "certificate.DeleteCertficateResponse")
	proto.RegisterType((*ListCertficateRequest)(nil), "certificate.ListCertficateRequest")
	proto.RegisterType((*ListCertficateResponse)(nil), "certificate.ListCertficateResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CertificateService service

type CertificateServiceClient interface {
	Create(ctx context.Context, in *CreateCertficateRequest, opts ...grpc.CallOption) (*CreateCertficateResponse, error)
	Read(ctx context.Context, in *ReadCertficateRequest, opts ...grpc.CallOption) (*ReadCertficateResponse, error)
	Update(ctx context.Context, in *UpdateCertficateRequest, opts ...grpc.CallOption) (*UpdateCertficateResponse, error)
	List(ctx context.Context, in *ListCertficateRequest, opts ...grpc.CallOption) (*ListCertficateResponse, error)
	Delete(ctx context.Context, in *DeleteCertficateRequest, opts ...grpc.CallOption) (*DeleteCertficateResponse, error)
}

type certificateServiceClient struct {
	cc *grpc.ClientConn
}

func NewCertificateServiceClient(cc *grpc.ClientConn) CertificateServiceClient {
	return &certificateServiceClient{cc}
}

func (c *certificateServiceClient) Create(ctx context.Context, in *CreateCertficateRequest, opts ...grpc.CallOption) (*CreateCertficateResponse, error) {
	out := new(CreateCertficateResponse)
	err := grpc.Invoke(ctx, "/certificate.CertificateService/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificateServiceClient) Read(ctx context.Context, in *ReadCertficateRequest, opts ...grpc.CallOption) (*ReadCertficateResponse, error) {
	out := new(ReadCertficateResponse)
	err := grpc.Invoke(ctx, "/certificate.CertificateService/Read", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificateServiceClient) Update(ctx context.Context, in *UpdateCertficateRequest, opts ...grpc.CallOption) (*UpdateCertficateResponse, error) {
	out := new(UpdateCertficateResponse)
	err := grpc.Invoke(ctx, "/certificate.CertificateService/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificateServiceClient) List(ctx context.Context, in *ListCertficateRequest, opts ...grpc.CallOption) (*ListCertficateResponse, error) {
	out := new(ListCertficateResponse)
	err := grpc.Invoke(ctx, "/certificate.CertificateService/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificateServiceClient) Delete(ctx context.Context, in *DeleteCertficateRequest, opts ...grpc.CallOption) (*DeleteCertficateResponse, error) {
	out := new(DeleteCertficateResponse)
	err := grpc.Invoke(ctx, "/certificate.CertificateService/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CertificateService service

type CertificateServiceServer interface {
	Create(context.Context, *CreateCertficateRequest) (*CreateCertficateResponse, error)
	Read(context.Context, *ReadCertficateRequest) (*ReadCertficateResponse, error)
	Update(context.Context, *UpdateCertficateRequest) (*UpdateCertficateResponse, error)
	List(context.Context, *ListCertficateRequest) (*ListCertficateResponse, error)
	Delete(context.Context, *DeleteCertficateRequest) (*DeleteCertficateResponse, error)
}

func RegisterCertificateServiceServer(s *grpc.Server, srv CertificateServiceServer) {
	s.RegisterService(&_CertificateService_serviceDesc, srv)
}

func _CertificateService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCertficateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/certificate.CertificateService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateServiceServer).Create(ctx, req.(*CreateCertficateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CertificateService_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadCertficateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateServiceServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/certificate.CertificateService/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateServiceServer).Read(ctx, req.(*ReadCertficateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CertificateService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCertficateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/certificate.CertificateService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateServiceServer).Update(ctx, req.(*UpdateCertficateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CertificateService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCertficateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/certificate.CertificateService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateServiceServer).List(ctx, req.(*ListCertficateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CertificateService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCertficateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/certificate.CertificateService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateServiceServer).Delete(ctx, req.(*DeleteCertficateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CertificateService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "certificate.CertificateService",
	HandlerType: (*CertificateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _CertificateService_Create_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _CertificateService_Read_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _CertificateService_Update_Handler,
		},
		{
			MethodName: "List",
			Handler:    _CertificateService_List_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _CertificateService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/tcvem/backend/pkg/pb/certificate.proto",
}

func init() { proto.RegisterFile("github.com/tcvem/backend/pkg/pb/certificate.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 657 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0xcd, 0x4e, 0xdb, 0x4c,
	0x14, 0xc5, 0x21, 0x98, 0x7c, 0x37, 0x9f, 0xaa, 0x6a, 0x54, 0x88, 0x13, 0x75, 0x11, 0xb9, 0x20,
	0xb1, 0x89, 0x0d, 0x69, 0xbb, 0xa1, 0x52, 0x55, 0x41, 0x5b, 0x89, 0xc2, 0xa2, 0x0d, 0xaa, 0x90,
	0xba, 0x41, 0x13, 0xfb, 0x62, 0x46, 0x38, 0x9e, 0x61, 0x3c, 0x46, 0xcd, 0xd3, 0xf4, 0x39, 0x92,
	0x77, 0xe9, 0xa6, 0x4f, 0x52, 0x8d, 0xc7, 0x40, 0xe2, 0x24, 0x04, 0xa1, 0xee, 0xae, 0xef, 0x9c,
	0x73, 0x7c, 0x7c, 0x7f, 0xc6, 0xb0, 0x17, 0x31, 0x75, 0x99, 0xf5, 0xbd, 0x80, 0x0f, 0x7c, 0x15,
	0xdc, 0xe0, 0xc0, 0xef, 0xd3, 0xe0, 0x0a, 0x93, 0xd0, 0x17, 0x57, 0x91, 0x2f, 0xfa, 0x7e, 0x80,
	0x52, 0xb1, 0x0b, 0x16, 0x50, 0x85, 0x9e, 0x90, 0x5c, 0x71, 0x52, 0x9f, 0x48, 0xb5, 0x3e, 0x4d,
	0xf0, 0x59, 0x72, 0xc1, 0xfb, 0x31, 0xff, 0xc9, 0x05, 0x26, 0x3e, 0x55, 0x31, 0x4d, 0x3b, 0x54,
	0x88, 0x8e, 0xe2, 0x3c, 0xbe, 0x62, 0xca, 0x97, 0x22, 0xf0, 0x25, 0xa6, 0x3c, 0x93, 0x01, 0xde,
	0x05, 0x46, 0xb3, 0xb5, 0xbf, 0x48, 0x26, 0x3f, 0x0e, 0x3a, 0x11, 0x26, 0x9d, 0x88, 0xcb, 0x81,
	0xcf, 0x85, 0x62, 0x3c, 0x49, 0x7d, 0xfd, 0x50, 0x70, 0xbf, 0x3c, 0xde, 0xc2, 0x75, 0x86, 0x72,
	0xe8, 0x07, 0x3c, 0x8e, 0x31, 0xd0, 0x3a, 0xe7, 0x5c, 0xa0, 0xa4, 0x8a, 0xcb, 0xd4, 0x68, 0xb9,
	0xbf, 0x2c, 0x80, 0x43, 0x94, 0xca, 0x7c, 0x1d, 0x79, 0x0b, 0x15, 0x16, 0x3a, 0x56, 0xdb, 0xda,
	0xa9, 0x77, 0x37, 0xbc, 0x5c, 0xcf, 0x93, 0x22, 0xf0, 0x8e, 0x42, 0x4c, 0x74, 0x09, 0x50, 0x1e,
	0x3c, 0x1b, 0x8f, 0x9a, 0x00, 0x35, 0x52, 0xcd, 0x32, 0x16, 0xee, 0x58, 0xbd, 0x0a, 0x0b, 0x09,
	0x81, 0x6a, 0x42, 0x07, 0xe8, 0x54, 0xda, 0xd6, 0xce, 0x7f, 0xbd, 0x3c, 0xd6, 0xb9, 0x4b, 0x9e,
	0x2a, 0x67, 0xd5, 0xe4, 0x74, 0xac, 0x73, 0x82, 0x4b, 0xe5, 0x54, 0x4d, 0x4e, 0xc7, 0xe4, 0x05,
	0xac, 0x25, 0x5c, 0x61, 0xea, 0xac, 0xe5, 0x49, 0xf3, 0xb0, 0x5f, 0x1b, 0x8f, 0x9a, 0xd5, 0x9a,
	0xd5, 0xb6, 0xdc, 0x13, 0x68, 0x1c, 0x4a, 0xa4, 0x0a, 0xef, 0x6d, 0xf6, 0xf0, 0x3a, 0xc3, 0x54,
	0x91, 0x3d, 0x58, 0x17, 0x74, 0x18, 0x73, 0x7a, 0x6b, 0xb9, 0xe1, 0x4d, 0x76, 0x6f, 0x82, 0x70,
	0x8b, 0x73, 0x8f, 0xc1, 0x99, 0x55, 0x4b, 0x05, 0x4f, 0x52, 0x24, 0x3e, 0xd8, 0x12, 0xd3, 0x2c,
	0x56, 0xcb, 0xd4, 0x0a, 0x98, 0xfb, 0x1e, 0x36, 0x7a, 0x48, 0xc3, 0x59, 0x63, 0xdb, 0x4b, 0xcb,
	0xa8, 0xcb, 0xe6, 0x1e, 0xc1, 0x66, 0x99, 0xff, 0x54, 0x2b, 0x27, 0xd0, 0xf8, 0x2e, 0xc2, 0x7f,
	0x58, 0xa5, 0x59, 0xb5, 0xa7, 0x5a, 0xfb, 0x00, 0x8d, 0x8f, 0x18, 0xe3, 0x3c, 0x6b, 0x8f, 0xac,
	0x53, 0x0b, 0x9c, 0x59, 0x05, 0x63, 0xc7, 0xfd, 0x63, 0xc1, 0xc6, 0x09, 0x4b, 0xd5, 0xac, 0xb8,
	0x0f, 0xf6, 0x05, 0x8b, 0x15, 0xca, 0x3b, 0xa3, 0xb7, 0xcb, 0xe2, 0x51, 0xc1, 0xbc, 0xcf, 0xf9,
	0x19, 0x4b, 0xa2, 0x5e, 0x01, 0x23, 0xbb, 0x50, 0xe3, 0x32, 0x44, 0x79, 0xde, 0x1f, 0xe6, 0x93,
	0xac, 0x3d, 0x4d, 0x51, 0x4e, 0xb9, 0x54, 0x9a, 0xb0, 0x9e, 0xc3, 0x0e, 0x86, 0xe4, 0x8d, 0x7e,
	0x05, 0xc6, 0x61, 0x9a, 0x4f, 0x79, 0xbd, 0xfb, 0xb2, 0xfc, 0x0a, 0x8c, 0xc3, 0x53, 0x2c, 0x76,
	0xaf, 0x57, 0x60, 0xc9, 0x2e, 0xd8, 0x82, 0x46, 0x2c, 0x89, 0xf2, 0x3d, 0xa8, 0x77, 0x9d, 0x69,
	0xd6, 0x57, 0x7d, 0x46, 0x0d, 0xc3, 0xe0, 0xdc, 0x63, 0xd8, 0x2c, 0x7f, 0x63, 0xd1, 0x8d, 0x3d,
	0x58, 0x37, 0x65, 0x4e, 0x1d, 0xab, 0xbd, 0xfa, 0x60, 0x73, 0x0b, 0x5c, 0xf7, 0xf7, 0x2a, 0x90,
	0xc3, 0x7b, 0xcc, 0x29, 0xca, 0x1b, 0x16, 0x20, 0x39, 0x03, 0xdb, 0x6c, 0x06, 0xd9, 0x9a, 0x96,
	0x98, 0xbf, 0x7c, 0xad, 0xed, 0x25, 0xa8, 0xa2, 0x3f, 0x2b, 0xe4, 0x1b, 0x54, 0xf5, 0x94, 0x13,
	0x77, 0x8a, 0x30, 0x77, 0x71, 0x5a, 0xaf, 0x1e, 0xc4, 0xdc, 0x49, 0x9e, 0x81, 0x6d, 0xe6, 0xb3,
	0xe4, 0x75, 0xc1, 0x0a, 0x94, 0xbc, 0x2e, 0x1a, 0x6d, 0xe3, 0x55, 0x17, 0xba, 0xe4, 0x75, 0xee,
	0x7c, 0x95, 0xbc, 0xce, 0xef, 0x8f, 0xbb, 0x42, 0x22, 0xb0, 0xcd, 0xf0, 0x96, 0xbc, 0x2e, 0xd8,
	0x89, 0x92, 0xd7, 0x85, 0x73, 0xff, 0x7c, 0x3c, 0x6a, 0xfe, 0x3f, 0x79, 0x77, 0xb7, 0xec, 0xf1,
	0xa8, 0x59, 0xa9, 0x59, 0x07, 0x5b, 0x3f, 0xdc, 0x25, 0xff, 0xb8, 0x77, 0xa2, 0xdf, 0xb7, 0xf3,
	0xfb, 0xff, 0xf5, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x63, 0x39, 0x27, 0xe4, 0x10, 0x07, 0x00,
	0x00,
}
